package com.techelevator.tenmo.datasource.JdbcDao;

import com.techelevator.tenmo.datasource.dao.TenmoTransferDao;

import com.techelevator.tenmo.datasource.model.TenmoAccount;
import com.techelevator.tenmo.datasource.model.TenmoTransfer;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.CannotGetJdbcConnectionException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import com.techelevator.tenmo.exception.DaoException;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Service
public class JdbcTenmoTransferDao implements TenmoTransferDao {


    private final JdbcTemplate jdbcTemplate;

    public JdbcTenmoTransferDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate ;
    }


    @Override
    public TenmoTransfer saveTransfer(TenmoTransfer aTransfer, String transferType) {

        // TODO: Given a Transfer object write a method to get add the Transfer to the data source

        JdbcTenmoAccountDao jdbcTenmoAccountDao = new JdbcTenmoAccountDao(jdbcTemplate); //declare JdbcTenmoAccountDao

        //Define an object to hold the return value
        TenmoTransfer newTransfer = null;

        // Initialize
        TenmoTransfer.TRANSFER_TYPE transfer_type;
        //Test Exception
        if (aTransfer.getFromTenmoAccount().equals(aTransfer.getToTenmoAccount())) {
            throw new IllegalArgumentException("You cannot send money to yourself");
        }

            //1.Define a string to hold the SQL Statement
            String create = " INSERT INTO transfer (transfer_type_id, transfer_status_id, account_from, account_to, amount) " +
                    " VALUES(?,?,?,?,?) RETURNING transfer_id"; //RETURNING used to retrieve department_id that is generated by the database manager

        //2.Send the SQL statement database manager
        try{
            if (transferType.equals("send")){
                transfer_type = TenmoTransfer.TRANSFER_TYPE.SEND;
            } else {
                transfer_type = TenmoTransfer.TRANSFER_TYPE.REQUEST;
            }
            aTransfer.setTransferType(transfer_type);
            long newTransferId = jdbcTemplate.queryForObject(create, long.class,aTransfer.getTransferType().ordinal(), aTransfer.getTransferStatus().ordinal(), aTransfer.getFromTenmoAccount().getAccount_id(), aTransfer.getToTenmoAccount().getAccount_id(), aTransfer.getAmount());
            newTransfer = getATransferById(newTransferId);
            // -------- Automatic approval/rejection for Send ------------
            // If (account amount after transfer) >= 0, then we update amount on both account-from and account-to
            if (transferType.equals("send") && jdbcTenmoAccountDao.getAccountForAccountId(aTransfer.getFromTenmoAccount().getAccount_id()).getBalance().subtract(aTransfer.getAmount()).compareTo(BigDecimal.ZERO) > 0) {
                System.out.println("Transfer approved.");
                // Update transfer status
                aTransfer.setTransferStatus(TenmoTransfer.TRANSFER_STATUS.APPROVED);
                // Update accounts
                jdbcTenmoAccountDao.updateAccount(aTransfer.getFromTenmoAccount());
                jdbcTenmoAccountDao.updateAccount(aTransfer.getToTenmoAccount());
            } else if (transferType.equals("send")) {
                System.out.println ("Transfer rejected.");
                // Update transfer status
                aTransfer.setTransferStatus(TenmoTransfer.TRANSFER_STATUS.REJECTED);
            } else {
                System.out.println("Request created. Pending for decision.");
                jdbcTenmoAccountDao.updateAccount(aTransfer.getFromTenmoAccount());
                jdbcTenmoAccountDao.updateAccount(aTransfer.getToTenmoAccount());
            }
        } catch(CannotGetJdbcConnectionException e){
            throw new DaoException("Unable to connect to server or database", e);
        } catch (DataIntegrityViolationException e) {
            throw new DaoException("Data integrity violation", e);
        }
        return newTransfer;
    }

    @Override
    public List<TenmoTransfer> getTransfersForUser(int userId) {

        // TODONE: Given a user id, write a method to retrieve all transfers for that user id from the data source
        List<TenmoTransfer> allTransfers = new ArrayList<>();
        String sql = " SELECT * " +
                " FROM transfer INNER JOIN transfer_type " +
                " ON transfer.transfer_type_id = transfer_type.transfer_type_id " +
                " INNER JOIN transfer_status " +
                " ON transfer.transfer_status_id = transfer_status.transfer_status_id " +
                " INNER JOIN account " +
                " ON transfer.account_from = account.account_id OR transfer.account_to = account.account_id " +
                " INNER JOIN tenmo_user " +
                " ON account.user_id = tenmo_user.user_id " +
                " WHERE tenmo_user.user_id = ? " +
                " ORDER BY account.user_id; ";
        try{
            SqlRowSet results = jdbcTemplate.queryForRowSet(sql, userId);
            while (results.next()) {
                TenmoTransfer transferResult = mapRowToTransfer(results);
                allTransfers.add(transferResult);
            }
        } catch (CannotGetJdbcConnectionException e) {
            throw new DaoException("Unable to connect to server or database", e);
        }

        return allTransfers;
    }

    @Override
    public TenmoTransfer getATransferById(Long transferIdRequested) {

        // TODONE: Given a transfer id, retrieve the Transfer from the data source

        TenmoTransfer transfer = null;
        String sql = " SELECT transfer.transfer_id, transfer.transfer_type_id, transfer.transfer_status_id, transfer.account_from, transfer.account_to, transfer.amount, transfer.created_at FROM " +
                " transfer INNER JOIN transfer_type " +
                " ON transfer.transfer_type_id = transfer_type.transfer_type_id " +
                " INNER JOIN transfer_status " +
                " ON transfer.transfer_status_id = transfer_status.transfer_status_id " +
                " WHERE transfer.transfer_id = ?" +
                " ORDER BY transfer.amount; ";

        try {
            SqlRowSet results = jdbcTemplate.queryForRowSet(sql, transferIdRequested);
            if (results.next()) {
                transfer = mapRowToTransfer(results);
            }
        } catch (CannotGetJdbcConnectionException e) {
            throw new DaoException("Unable to connect to server or database", e);
        }

        return transfer;
    }

    @Override
    public TenmoTransfer updateTransfer(TenmoTransfer transferToUpdate) {
        TenmoTransfer updatedTransfer = null;
        String sql = "UPDATE transfer SET transfer_type_id = ?, transfer_status_id = ? " +
                "WHERE transfer_id = ?";
        try {
            int numberOfRows = jdbcTemplate.update(sql, transferToUpdate.getTransferType().ordinal(), transferToUpdate.getTransferStatus().ordinal(), transferToUpdate.getTransferId());
            if (numberOfRows == 0) {
                throw new DaoException("Zero rows affected, expected at least one");
            } else {
                updatedTransfer = getATransferById(transferToUpdate.getTransferId());
            }
        } catch (CannotGetJdbcConnectionException e) {
            throw new DaoException("Unable to connect to server or database", e);
        } catch (DataIntegrityViolationException e) {
            throw new DaoException("Data integrity violation", e);
        }
        return updatedTransfer;
    }


    private TenmoTransfer mapRowToTransfer(SqlRowSet results) {
        TenmoTransfer transfer = new TenmoTransfer();
        JdbcTenmoAccountDao account = new JdbcTenmoAccountDao(jdbcTemplate);

        transfer.setAmount(results.getBigDecimal("amount"));
        if (results.getTimestamp("created_at") != null ) {
            transfer.setCreate(results.getTimestamp("created_at"));
        }
        transfer.setFromTenmoAccount(account.getAccountForAccountId((long)(results.getInt("account_from"))));
        transfer.setToTenmoAccount(account.getAccountForAccountId((long)(results.getInt("account_to"))));
        transfer.setTransferId((long)results.getInt("transfer_id"));
        transfer.setTransferStatus(TenmoTransfer.TRANSFER_STATUS.values()[results.getInt("transfer_status_id")]);
        transfer.setTransferType(TenmoTransfer.TRANSFER_TYPE.values()[results.getInt("transfer_type_id")]);

        return transfer;
    }
}
